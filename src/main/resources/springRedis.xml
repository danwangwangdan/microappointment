<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <cache:annotation-driven cache-manager="redisCacheManager"/>
    <!-- 配置 JedisPoolConfig 实例 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!-- 配置JedisConnectionFactory -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.pass}"/>
        <property name="database" value="${redis.dbIndex}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <!-- 配置RedisTemplate -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <!-- 配置RedisCacheManager -->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="defaultExpiration" value="${redis.expiration}"/>
    </bean>

    <!--&lt;!&ndash; redis 序列化策略 ，通常情况下key值采用String序列化策略， &ndash;&gt;-->
    <!--&lt;!&ndash; 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； &ndash;&gt;-->
    <!--&lt;!&ndash; 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 &ndash;&gt;-->
    <!--<bean id="stringRedisSerializer"-->
    <!--class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->

    <!--<bean id='redisWriteTemplate' class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
    <!--<property name="keySerializer" ref="stringRedisSerializer"/>-->
    <!--<property name="valueSerializer" ref="stringRedisSerializer"/>-->
    <!--<property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
    <!--<property name="hashValueSerializer" ref="stringRedisSerializer"/>-->
    <!--</bean>-->
</beans>